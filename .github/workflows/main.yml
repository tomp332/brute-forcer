name: Upload Go test results

on: [ push ]

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [ linux, windows ]
        goarch: [ "386"]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go get .
      - name: Test with Go
        run: go test -json > TestResults-${{ matrix.go-version }}.json
      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        with:
          name: Go-results-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Build Go
        if: startsWith(matrix.os, 'windows')
        run: go build -o goBrute.exe
      - name: Build Go
        if: startsWith(matrix.os, 'linux')
        run: go build -o goBrute
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          if: startsWith(matrix.goos, 'windows')
          file: goBrute.exe
          asset_name: goBrute.exe
          tag: ${{ github.ref }}
          overwrite: true
          body: "New binary release version"
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          if: startsWith(matrix.goos, 'windows')
          file: goBrute
          asset_name: goBrute
          tag: ${{ github.ref }}
          overwrite: true
          body: "New binary release version"
